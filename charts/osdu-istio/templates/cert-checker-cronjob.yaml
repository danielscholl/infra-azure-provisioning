{{- if and (eq (.Values.global.isDataPartitionDeployment | default false) false)  .Values.global.isAutoscalingEnabled }}
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: {{ .Values.global.job.name }}
  namespace: osdu
  labels:
    app: "{{ .Values.global.job.name }}"
spec:
  schedule: "0 * * * *"
  successfulJobsHistoryLimit: 2
  failedJobsHistoryLimit: 3
  jobTemplate:
    metadata:
      name: "{{ .Values.global.job.name }}"
      labels:
        app: "{{ .Values.global.job.name }}"
        type: "job"
    spec:
      backoffLimit: 3
      template:
        spec:
          containers:
          - name: cert-checker
            image: {{ .Values.global.job.image }}
            env:
            - name: client_id
              valueFrom:
                secretKeyRef:
                  name: active-directory
                  key: principal-clientid
            - name: client_secret
              valueFrom:
                secretKeyRef:
                  name: active-directory
                  key: principal-clientpassword
            - name: tenant_id
              valueFrom:
                secretKeyRef:
                  name: active-directory
                  key: tenantid
            - name: ENV_SR_GROUP_NAME
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.global.job.appgw_configmap_name }}
                  key: ENV_SR_GROUP_NAME
            - name: ENV_KEYVAULT_NAME
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.global.job.appgw_configmap_name }}
                  key: ENV_KEYVAULT_NAME
            - name: ENV_CLUSTER_NAME
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.global.job.appgw_configmap_name }}
                  key: ENV_CLUSTER_NAME
            - name: ENV_APPGW_NAME
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.global.job.appgw_configmap_name }}
                  key: ENV_APPGW_NAME
            - name: ENV_SUBSCRIPTION_NAME
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.global.job.osdu_configmap_name }}
                  key: ENV_SUBSCRIPTION_NAME
            command:
            - /bin/sh
            args:
            - -c
            - |
              SIDECAR_PORT=15020
              KV_CERT_NAME=istio-appgw-ssl-cert
              K8S_ISTIONAMESPACE_NAME=istio-system

              # Compare expire dates of certificates in Key Vault and in istio-system namespaces
              function check_expire_date() {
                echo "Compare expire dates of certificates in Key Vault and in istio-system namespaces"
                az keyvault certificate download  --vault-name  ${ENV_KEYVAULT_NAME} -n ${KV_CERT_NAME} --file ${KV_CERT_NAME}.pem
                KV_CERT_EXPIREDATE=$(openssl x509 -in ${KV_CERT_NAME}.pem -enddate -noout |  cut -d '=' -f2)
                KV_CERT_EXPIREDATE=$(date "+%Y-%m-%d" --date="${KV_CERT_EXPIREDATE}")

                az aks get-credentials --resource-group ${ENV_SR_GROUP_NAME} --name ${ENV_CLUSTER_NAME}
                kubectl get secret -n ${K8S_ISTIONAMESPACE_NAME} ${K8S_CERT_SECRET} -o jsonpath="{ .data.tls\.crt }" | base64 -d > cert.crt
                SECRET_CERT_EXPIRE_DATE=$(openssl x509 -in cert.crt -enddate -noout |  cut -d '=' -f2)
                SECRET_CERT_EXPIRE_DATE=$(date "+%Y-%m-%d" --date="${SECRET_CERT_EXPIRE_DATE}")

                publiccert=$(az network application-gateway ssl-cert show -g ${ENV_SR_GROUP_NAME} --gateway-name ${ENV_APPGW_NAME} -n ${KV_CERT_NAME} -o tsv --query publicCertData)
                echo "-----BEGIN PKCS7-----" >> public.cert; echo "${publiccert}" >> public.cert; echo "-----END PKCS7-----" >> public.cert
                GW_CERT_EXPIRE_DATE=$(cat public.cert | fold -w 64 | openssl pkcs7 -print_certs | openssl x509 -noout -enddate |  cut -d '=' -f2)
                GW_CERT_EXPIRE_DATE=$(date -d "$GW_CERT_EXPIRE_DATE" +%F)


                if [ ${KV_CERT_EXPIREDATE} = ${SECRET_CERT_EXPIRE_DATE} ]; then
                  echo "KV_CERT_EXPIREDATE: ${KV_CERT_EXPIREDATE} and SECRET_CERT_EXPIRE_DATE: ${SECRET_CERT_EXPIRE_DATE}"
                  echo "The cert in secret is up to date"
                  echo "Compairing the cert in secret with AppGW cert"
                  if [ ${SECRET_CERT_EXPIRE_DATE} = ${GW_CERT_EXPIRE_DATE} ]; then
                    echo "SECRET_CERT_EXPIRE_DATE: ${SECRET_CERT_EXPIRE_DATE} and GW_CERT_EXPIRE_DATE: ${GW_CERT_EXPIRE_DATE}"
                    echo "The cert in AppGW is up to date"
                    exit 0
                  else
                    echo "SECRET_CERT_EXPIRE_DATE: ${SECRET_CERT_EXPIRE_DATE} and GW_CERT_EXPIRE_DATE: ${GW_CERT_EXPIRE_DATE}"
                    echo "The cert in AppGW is not up to date"
                  fi
                else
                  echo "KV_CERT_EXPIREDATE: ${KV_CERT_EXPIREDATE} and SECRET_CERT_EXPIRE_DATE: ${SECRET_CERT_EXPIRE_DATE}"
                  echo "The cert in secret is not up to date"
                fi
                rm -f ${KV_CERT_NAME}.pem
              }

              # Cleanup function
              cleanup() {
                echo "Clean all existing files"
                rm -f cert.crt cert.key public.cert osdu-certificate.pfx ${KV_CERT_NAME}.pem
                curl -X POST "http://localhost:${SIDECAR_PORT}/quitquitquit"
              }

              trap cleanup 0 2 3 6 ERR

              set -e
              # Wait for internet connection
              until nc -z google.com 80
              do
                sleep 1
              done

              # Install kubectl
              if [ ! -x /usr/local/bin/kubectl ]; then
                echo "Download and install kubectl..."
                curl -Lo /usr/local/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
                chmod a+x /usr/local/bin/kubectl
              fi

              # Install coreutils
              apk add --update coreutils

              # Log In in Azure
              az login --service-principal -u ${client_id} --password ${client_secret} --tenant ${tenant_id}
              az account set --subscription ${ENV_SUBSCRIPTION_NAME}

{{- if .Values.global.istio.enableIstioKeyvaultCert }}

              K8S_CERT_SECRET=istio-appgw-ssl-cert
              K8S_NAMESPACE_NAME=istio-system
              
              # Check certificate expire date.
              check_expire_date

              # Download BYOC certificate from keyvault
              echo "Download BYOC certificate from keyvault"
              az keyvault secret download --file ${KV_CERT_NAME}.pfx --vault-name ${ENV_KEYVAULT_NAME} --encoding base64 --name ${KV_CERT_NAME}

              # Upload BYOC certificate to appgw
              echo "Upload BYOC certificate to appgw" 
              az network application-gateway ssl-cert update -g ${ENV_SR_GROUP_NAME} --gateway-name ${ENV_APPGW_NAME} -n ${KV_CERT_NAME} --cert-file ${K8S_CERT_SECRET}.pfx --cert-password ""

              # Extract key and crt
              openssl pkcs12 -in ${K8S_CERT_SECRET}.pfx -out cert.pem -passin pass:"" -nodes -passout pass:""
              openssl rsa -in cert.pem -out cert.key
              openssl crl2pkcs7 -nocrl -certfile cert.pem | openssl pkcs7 -print_certs -out cert.crt

              # Create secret for istio-ingressgateway in istio-system namespace
              kubectl create secret -n ${K8S_ISTIONAMESPACE_NAME} generic ${K8S_CERT_SECRET} \
              --save-config --dry-run=client \
              --from-file=tls.crt=cert.crt --from-file=tls.key=cert.key \
              -o yaml | kubectl apply -f -

              sleep 5

              # Restart istio-ingressgateway pods
              kubectl rollout restart -n ${K8S_ISTIONAMESPACE_NAME} deployment/istio-ingressgateway

              # Check certificate expire date one more time
              check_expire_date

              echo "Cannot update cert in secret"
              exit 1

    {{ else }}
              
              K8S_CERT_SECRET=osdu-certificate
              K8S_NAMESPACE_NAME=osdu 

              # Check certificate expire date.
              check_expire_date

               # Get osdu-certificate secret created by cert-manager in osdu namespace and extract key and crt
              kubectl get secret -n ${K8S_NAMESPACE_NAME} ${K8S_CERT_SECRET} -o jsonpath="{ .data.tls\.crt }" | base64 -d > cert.crt
              kubectl get secret -n ${K8S_NAMESPACE_NAME} ${K8S_CERT_SECRET} -o jsonpath="{ .data.tls\.key }" | base64 -d > cert.key

              # Create secret for istio-ingressgateway in istio-system namespace from key and crt
              kubectl create secret -n ${K8S_ISTIONAMESPACE_NAME} generic ${K8S_CERT_SECRET} \
              --save-config --dry-run=client \
              --from-file=tls.crt=cert.crt --from-file=tls.key=cert.key \
              -o yaml | kubectl apply -f -

              # Create certificate file
              openssl pkcs12 \
                -passout pass: \
                -export \
                -out osdu-certificate.pfx \
                -in cert.crt \
                -inkey cert.key

              # Upload certificate file in Key Vault to use in in AppGW
              az keyvault certificate import --vault-name ${ENV_KEYVAULT_NAME} -n ${KV_CERT_NAME} -f osdu-certificate.pfx

              sleep 5

              # Check certificate expire date one more time
              check_expire_date

              echo "Cannot update KV cert"
              exit 1
    {{- end }}  
          restartPolicy: Never
{{- end }}           
