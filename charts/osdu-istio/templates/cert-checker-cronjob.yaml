{{- if and (eq (.Values.global.isDataPartitionDeployment | default false) false)  .Values.global.isAutoscalingEnabled }}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ .Values.global.job.name }}
  namespace: osdu
  labels:
    app: "{{ .Values.global.job.name }}"
spec:
  schedule: "0 * * * *"
  successfulJobsHistoryLimit: 2
  failedJobsHistoryLimit: 3
  jobTemplate:
    metadata:
      name: "{{ .Values.global.job.name }}"
      labels:
        app: "{{ .Values.global.job.name }}"
        type: "job"
    spec:
      backoffLimit: 3
      template:
        spec:
          nodeSelector:
            agentpool: {{ .Values.global.aks_node_pool_internal }}         
          containers:
          - name: cert-checker
            image: {{ .Values.global.job.image }}
            env:
            - name: client_id
              valueFrom:
                secretKeyRef:
                  name: active-directory
                  key: principal-clientid
            - name: client_secret
              valueFrom:
                secretKeyRef:
                  name: active-directory
                  key: principal-clientpassword
            - name: tenant_id
              valueFrom:
                secretKeyRef:
                  name: active-directory
                  key: tenantid
            - name: ENV_SR_GROUP_NAME
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.global.job.appgw_configmap_name }}
                  key: ENV_SR_GROUP_NAME
            - name: ENV_KEYVAULT_NAME
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.global.job.appgw_configmap_name }}
                  key: ENV_KEYVAULT_NAME
            - name: ENV_CLUSTER_NAME
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.global.job.appgw_configmap_name }}
                  key: ENV_CLUSTER_NAME
            - name: ENV_APPGW_NAME
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.global.job.appgw_configmap_name }}
                  key: ENV_APPGW_NAME
            - name: ENV_SUBSCRIPTION_NAME
              valueFrom:
                configMapKeyRef:
                  name: {{ .Values.global.job.osdu_configmap_name }}
                  key: ENV_SUBSCRIPTION_NAME
            command:
            - /bin/sh
            args:
            - -c
            - |
              SIDECAR_PORT=15020
              KEYVAULT_CERT_NAME=istio-appgw-ssl-cert
              K8S_ISTIONAMESPACE_NAME=istio-system

              # Function stops the script in case all secrets are already synced.
              function check_expire_date() {
                echo -e "\n[INFO] Compare expire dates of certificates in Key Vault and in ${K8S_ISTIONAMESPACE_NAME} namespaces"
                az keyvault certificate download  --vault-name  ${ENV_KEYVAULT_NAME} -n ${KEYVAULT_CERT_NAME} --file ${KEYVAULT_CERT_NAME}.pem
                KEYVAULT_CERT_EXPIRE_DATE=$(openssl x509 -in ${KEYVAULT_CERT_NAME}.pem -enddate -noout |  cut -d '=' -f2)
                KEYVAULT_CERT_EXPIRE_DATE=$(date "+%Y-%m-%d" --date="${KEYVAULT_CERT_EXPIRE_DATE}")

                kubectl get secret -n ${K8S_ISTIONAMESPACE_NAME} ${K8S_CERT_SECRET} -o jsonpath="{ .data.tls\.crt }" | base64 -d > cert.crt
                SECRET_CERT_EXPIRE_DATE=$(openssl x509 -in cert.crt -enddate -noout |  cut -d '=' -f2)
                SECRET_CERT_EXPIRE_DATE=$(date "+%Y-%m-%d" --date="${SECRET_CERT_EXPIRE_DATE}")

                publiccert=$(az network application-gateway ssl-cert show -g ${ENV_SR_GROUP_NAME} --gateway-name ${ENV_APPGW_NAME} -n ${KEYVAULT_CERT_NAME} -o tsv --query publicCertData)
                echo "-----BEGIN PKCS7-----" >> public.cert; echo "${publiccert}" >> public.cert; echo "-----END PKCS7-----" >> public.cert
                APPGW_CERT_EXPIRE_DATE=$(cat public.cert | fold -w 64 | openssl pkcs7 -print_certs | openssl x509 -noout -enddate |  cut -d '=' -f2)
                APPGW_CERT_EXPIRE_DATE=$(date -d "$APPGW_CERT_EXPIRE_DATE" +%F)

                echo -e "\t KEYVAULT_CERT_EXPIRE_DATE:\t${KEYVAULT_CERT_EXPIRE_DATE}\n\t SECRET_CERT_EXPIRE_DATE:\t${SECRET_CERT_EXPIRE_DATE}"
                if [ ${KEYVAULT_CERT_EXPIRE_DATE} = ${SECRET_CERT_EXPIRE_DATE} ]; then
                  echo -e "[INFO] The cert in secret is up to date\n"
                  echo -e "[INFO] Comparing the cert in secret with AppGW cert"
                  echo -e "\t SECRET_CERT_EXPIRE_DATE:\t${SECRET_CERT_EXPIRE_DATE}\n\t APPGW_CERT_EXPIRE_DATE:\t${APPGW_CERT_EXPIRE_DATE}"
                  if [ ${SECRET_CERT_EXPIRE_DATE} = ${APPGW_CERT_EXPIRE_DATE} ]; then
                    echo -e "[INFO] The cert in AppGW is up to date\n"
                    exit 0
                  else
                    echo -e "[WARNING] The cert in AppGW is not up to date\n"
                  fi
                else
                  echo -e "[WARNING] The cert in secret is not up to date\n"
                fi
                rm -f ${KEYVAULT_CERT_NAME}.pem
              }
              
              function appgw_ssl_upload() {
                echo "[INFO] Upload BYOC certificate to appgw"
                az network application-gateway ssl-cert $1 -g ${ENV_SR_GROUP_NAME} --gateway-name ${ENV_APPGW_NAME} -n ${KEYVAULT_CERT_NAME} --cert-file ${K8S_CERT_SECRET}.pfx --cert-password "" && \
                echo "[INFO] The BYOC certificate ${KEYVAULT_CERT_NAME} has been successfully ${1}d to the gateway ${ENV_APPGW_NAME}"
              }

              function istio_ingress_ssl_udate() {
                echo "[INFO] Create secret for istio-ingressgateway in ${K8S_ISTIONAMESPACE_NAME} namespace"
                kubectl create secret -n ${K8S_ISTIONAMESPACE_NAME} generic ${K8S_CERT_SECRET} \
                --save-config --dry-run=client \
                --from-file=tls.crt=cert.crt --from-file=tls.key=cert.key \
                -o yaml | kubectl apply -f -
                sleep 5
                kubectl rollout restart -n ${K8S_ISTIONAMESPACE_NAME} deployment/istio-ingressgateway
                kubectl rollout status -n ${K8S_ISTIONAMESPACE_NAME} deployment/istio-ingressgateway --timeout=900s
              }

              cleanup() {
                echo "[INFO] Clean all existing files"
                rm -f cert.crt cert.key public.cert osdu-certificate.pfx ${KEYVAULT_CERT_NAME}.pem
                curl -sX POST "http://localhost:${SIDECAR_PORT}/quitquitquit"
              }

              trap cleanup 0 2 3 6

              set -e
              # Wait for internet connection
              until nc -z google.com 80
              do
                sleep 1
              done

              # Install kubectl
              if [ ! -x /usr/local/bin/kubectl ]; then
                echo "Download and install kubectl..."
                curl -Lso /usr/local/bin/kubectl https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
                chmod a+x /usr/local/bin/kubectl
              fi

              # Install coreutils
              apk add -q --update coreutils

              # Log In in Azure
              az login --service-principal -u ${client_id} --password="${client_secret}" --tenant ${tenant_id} -o table
              az account set --subscription ${ENV_SUBSCRIPTION_NAME}

              az aks get-credentials --resource-group ${ENV_SR_GROUP_NAME} --name ${ENV_CLUSTER_NAME}

              export APPGW_CERT_PUB_DATA=$(az network application-gateway ssl-cert show -g ${ENV_SR_GROUP_NAME} --gateway-name ${ENV_APPGW_NAME} -n ${KEYVAULT_CERT_NAME} -o tsv --query publicCertData)

{{- if .Values.global.istio.enableIstioKeyvaultCert }}

              K8S_CERT_SECRET=istio-appgw-ssl-cert
              K8S_NAMESPACE_NAME=istio-system
              
              echo "[INFO] Download BYOC certificate from keyvault"
              az keyvault secret download --file ${KEYVAULT_CERT_NAME}.pfx --vault-name ${ENV_KEYVAULT_NAME} --encoding base64 --name ${KEYVAULT_CERT_NAME}

              # Upload BYOC certificate to GW
              if [ ! -z $APPGW_CERT_PUB_DATA ]; then
                check_expire_date
                appgw_ssl_upload update; 
              else 
                appgw_ssl_upload create;
              fi

              # Extract key and crt
              openssl pkcs12 -in ${K8S_CERT_SECRET}.pfx -out cert.pem -passin pass:"" -nodes -passout pass:""
              openssl rsa -in cert.pem -out cert.key
              openssl crl2pkcs7 -nocrl -certfile cert.pem | openssl pkcs7 -print_certs -out cert.crt

              istio_ingress_ssl_udate

              # Check certificate expire date one more time
              check_expire_date

              echo "Cannot update cert in secret"
              exit 1

    {{ else }}
              
              # Sync AGIC SSL to Istio
              K8S_CERT_SECRET=osdu-certificate
              K8S_NAMESPACE_NAME=osdu 

              function copy_agic_ssl_to_istio () {
                echo "[INFO] Get agic ssl and extract key and crt"
                kubectl get secret -n ${K8S_NAMESPACE_NAME} ${K8S_CERT_SECRET} -o jsonpath="{ .data.tls\.crt }" | base64 -d > cert.crt
                kubectl get secret -n ${K8S_NAMESPACE_NAME} ${K8S_CERT_SECRET} -o jsonpath="{ .data.tls\.key }" | base64 -d > cert.key
                
                istio_ingress_ssl_udate
                
                echo "[INFO] Create .pfx certificate file"
                openssl pkcs12 \
                  -passout pass: \
                  -export \
                  -out osdu-certificate.pfx \
                  -in cert.crt \
                  -inkey cert.key
                
                echo "[INFO] Upload certificate file in Key Vault to use in in AppGW"
                az keyvault certificate import --vault-name ${ENV_KEYVAULT_NAME} -n ${KEYVAULT_CERT_NAME} -f osdu-certificate.pfx
              }

              if [ ! -z $APPGW_CERT_PUB_DATA ]; then
                check_expire_date
                copy_agic_ssl_to_istio; 
              else 
                copy_agic_ssl_to_istio;
              fi

              sleep 30

              # Check certificate expire date one more time
              check_expire_date

              echo "Cannot update KV cert"
              exit 1
    {{- end }}  
          restartPolicy: Never
{{- end }}           
