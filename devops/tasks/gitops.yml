#  Copyright Â© Microsoft Corporation
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

#####################
# README: GitOPS operations manifest repo tasks.
#####################

steps:
  - task: Bash@3
    displayName: "Flux Commit"
    env:
      CHART_PATH: ${{parameters.chartPath}}
      BRANCH_NAME: ${{ parameters.branchName }}
      SKIP_DEPLOY: ${{parameters.skipDeploy}}
      SERVICE_NAME: ${{parameters.serviceName}}
      HLD_REG_PATH: ${{parameters.hldRegPath}}
      GENERATION_PATH: ${{parameters.generationPath}}
      CHART_FOLDERS: ${{parameters.extractedChartFolder}}
      MIGRATION_CLEANUP: ${{parameters.migrationCleanup}}

    inputs:
      targetType: "inline"
      script: |
        #!/usr/bin/env bash
        set -euo pipefail

        if [[ "$(HELM_SOURCE)" != "" ]]
        then
            HELM_SOURCE_NAME=$(HELM_SOURCE)
        else
            HELM_SOURCE_NAME=$(Build.Repository.Name)
        fi
        GITOPS_MANIFEST_DIRECTORY=$(Build.SourcesDirectory)/$HELM_SOURCE_NAME/$CHART_PATH/$GENERATION_PATH
        cd $(Build.SourcesDirectory)/$(MANIFEST_REPO)

        function configure_git_profile() {
          git config --global user.email "gitops@azure.com"
          git config --global user.name "osdu bot"
          git config --global pull.ff only
        }

        function git_checkout() {
          echo "GIT CHECKOUT $BRANCH_NAME"

          if ! git checkout "$BRANCH_NAME" ; then
              git checkout -b "$BRANCH_NAME"
          fi

          echo "GIT STATUS"
          git status
        }

        function git_commit() {
          echo "COPY YAML FILES FROM $GITOPS_MANIFEST_DIRECTORY..."
          [ -d ./$GENERATION_PATH/$SERVICE_NAME ] && rm -rf ./$GENERATION_PATH/$SERVICE_NAME/*
          cp -rf $GITOPS_MANIFEST_DIRECTORY .

          echo "SKIP DEPLOY: $SKIP_DEPLOY, HLD-REG: $HLD_REG_PATH"
          if [[ $SKIP_DEPLOY == true ]]
          then
              echo "***********************"
              echo "FLUX DEPLOYMENT SKIPPED"
              echo "***********************"
          else
              echo "COPYING YAML FILES TO $HLD_REG_PATH/$SERVICE_NAME"
              mkdir -p ./$HLD_REG_PATH/$SERVICE_NAME
              rm -rf ./$HLD_REG_PATH/$SERVICE_NAME/*

              IFS="|"; for folder in $CHART_FOLDERS; do
                if [[ $MIGRATION_CLEANUP == "true" ]]; then
                  echo "[WARNING] Migration Cleanup set to true"
                  echo "[WARNING] This will remove manifests from flux for cleanup"
                  echo "[WARNING] This logic changed in OSDU v0.16.0 M13"
                  echo "[WARNING] Gradually moving to helm install/flux deprecation"
                  echo "[WARNING] Potential files to delete from FluxRepo:"
                  find  $GITOPS_MANIFEST_DIRECTORY/$SERVICE_NAME/$folder/ -name '*.yaml' -o -name '*.yml'

                  echo "REMOVING YAML FILES OF EXTRACTED CHARTS FOLDER $folder"
                  find ./$HLD_REG_PATH/$SERVICE_NAME -name '*.yaml' -o -name '*.yml' -exec rm -vf {} \;
                  rm -rfv ./$HLD_REG_PATH/$SERVICE_NAME
                  find ./$HLD_REG_PATH/../../../generated/$SERVICE_NAME -name '*.yaml' -o -name '*.yml' -exec rm -vf {} \; || echo "[WARN] No directory anymore in flux repo"
                  rm -rfv ./$HLD_REG_PATH/../../../generated/$SERVICE_NAME || echo "[WARN] No directory anymore in flux repo"
                else
                  echo "COPY YAML FILES OF EXTRACTED CHARTS FOLDER $folder"
                  cp -rf $GITOPS_MANIFEST_DIRECTORY/$SERVICE_NAME/$folder/* ./$HLD_REG_PATH/$SERVICE_NAME
                fi
              done
          fi


          git add -A

          if [[ $(git status --porcelain) ]]; then
              echo "GIT COMMIT"
              git commit -m "Updated k8s manifest files post commit: $(Build.SourceVersionMessage)"
          else
              echo "NOTHING TO COMMIT"
          fi
        }

        function git_pull(){
          if [[ $(git ls-remote --heads origin $BRANCH_NAME | wc -l) -eq 1 ]]; then
             git pull origin $BRANCH_NAME
          fi
        }

        function git_push(){
          git push origin $BRANCH_NAME
        }

        configure_git_profile
        git_checkout
        git_commit
        git_pull
        git_push

        TEMPLATES_DIR="$GITOPS_MANIFEST_DIRECTORY/$SERVICE_NAME/$folder/"

        echo "##vso[task.setvariable variable=templates_dir]${TEMPLATES_DIR}"
        echo "[INFO] Gitops manifest templates directory: ${TEMPLATES_DIR}"
