#  Copyright Â© Microsoft Corporation
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

parameters:
  skip: false
  terraformWorkspacePrefix: ''


steps:
  - task: Cache@2
    condition: and(succeeded(), not(coalesce(variables.SKIP_TESTS, ${{ parameters.skip }})))
    inputs:
      key: 'go | "$(Agent.OS)"'
      restoreKeys: |
          go | "$(Agent.OS)"
          go
      path: $(Pipeline.Workspace)/go
      cacheHitVar: CACHE_RESTORED
    displayName: Go cache

  - task: AzureCLI@1
    displayName: 'Run Unit Tests'
    env:
      TERRAFORM_WORKSPACE_PREFIX: ${{ parameters.terraformWorkspacePrefix }}
      TF_VAR_remote_state_container: $(TF_VAR_remote_state_container)
      TF_VAR_remote_state_account: $(TF_VAR_remote_state_account)
      TF_VAR_cosmosdb_replica_location: $(TF_VAR_cosmosdb_replica_location)
      TF_VAR_resource_group_location: $(TF_VAR_resource_group_location)
      TF_VAR_central_resources_workspace_name: $(TF_VAR_central_resources_workspace_name)
      TF_VAR_service_resources_workspace_name: $(TF_VAR_service_resources_workspace_name)
      TF_VAR_data_partition_resources_workspace_name: $(TF_VAR_data_partition_resources_workspace_name)
      TF_VAR_data_resources_workspace_name: $(TF_VAR_data_resources_workspace_name)
      TF_VAR_data_partition_name: $(TF_VAR_data_partition_name)
      TF_VAR_gitops_ssh_url: $(TF_VAR_gitops_ssh_url)
      TF_VAR_ssh_public_key_file: $(aksPublicAgentKeySecureDownload.secureFilePath)
      TF_VAR_gitops_ssh_key_file: $(aksPrivateGitopsKeySecureDownload.secureFilePath)
      TF_VAR_elasticsearch_username: $(elastic-username-${{ parameters.terraformWorkspacePrefix }}-${{ parameters.environmentName }})
      TF_VAR_elasticsearch_password: $(elastic-password-${{ parameters.terraformWorkspacePrefix }}-${{ parameters.environmentName }})
      TF_VAR_elasticsearch_endpoint: $(elastic-endpoint-${{ parameters.terraformWorkspacePrefix }}-${{ parameters.environmentName }})
      TF_VAR_principal_appId: $(TF_VAR_principal_appId)
      TF_VAR_principal_name: $(TF_VAR_principal_name)
      TF_VAR_principal_password: $(TF_VAR_principal_password)
      TF_VAR_principal_objectId: $(TF_VAR_principal_objectId)
      TF_VAR_gitops_path: $(TF_VAR_gitops_path)
      TF_VAR_deploy_dp_airflow: $(TF_VAR_deploy_dp_airflow)
      TF_VAR_istio_int_load_balancer_ip: $(TF_VAR_istio_int_load_balancer_ip)
      TF_VAR_aks_dns_host: $(TF_VAR_aks_dns_host)
      ${{ if ne(variables['TF_VAR_ssl_challenge_required'], '') }}:
        TF_VAR_ssl_challenge_required: $(TF_VAR_ssl_challenge_required)
      ${{ if ne(variables['TF_VAR_disable_airflow1'], '') }}:
        TF_VAR_disable_airflow1: $(TF_VAR_disable_airflow1)

    condition: not(coalesce(variables.SKIP_TESTS, ${{ parameters.skip }}))
    inputs:
      azureSubscription: '$(SERVICE_CONNECTION_NAME)'
      addSpnToEnvironment: true
      scriptLocation: inlineScript
      inlineScript: |
        #!/usr/bin/env bash
        set -euo pipefail

        if [ $TF_VAR_deploy_dp_airflow != "true" ] && [ $TF_VAR_deploy_dp_airflow != "false" ]; then
          export TF_VAR_deploy_dp_airflow=false
        fi

        export ARM_TENANT_ID=$tenantId
        export ARM_CLIENT_SECRET=$servicePrincipalKey
        export ARM_CLIENT_ID=$servicePrincipalId
        export ARM_ACCESS_KEY=$(az storage account keys list --subscription "$ARM_SUBSCRIPTION_ID" --account-name "$(TF_VAR_remote_state_account)" --query "[0].value" --output tsv)
        pushd "$ARTIFACT_ROOT"/"$TERRAFORM_TEMPLATE_PATH"

        if [[ "$TERRAFORM_WORKSPACE_PREFIX" == sr* ]]; then
          # Check if istio appgw enable
          pushd $(TF_TEMPLATE_WORKING_DIR)
          [ ! -f $TF_VARFILE ] && TF_VARFILE=override.tfvars
          AUTOSCALING_ENABLED=$(echo 'var.feature_flag["autoscaling"]' | terraform console -var-file=$TF_VARFILE)
          echo "AUTOSCALING_ENABLED : ${AUTOSCALING_ENABLED}"
          export AUTOSCALING_ENABLED
          popd
        fi

        # Setting the scripts to be run as executable
        chmod -fR 755 *.sh || true

        go test -v $(go list ./... | grep "$TERRAFORM_TEMPLATE_PATH" | grep "unit")
