#  Copyright ï¿½ Microsoft Corporation
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

# This template is responsible for detecting a service being alive.
steps:
  - task: AzureCLI@1
    displayName: 'Flux Deployment Wait'
    env:
      SERVICE_NAME: ${{parameters.serviceName}}
      BASE_NAME_SR: $(base-name-sr)
      SKIP_CHECK: ${{parameters.skipCheck}}
      MIGRATION_CLEANUP: ${{ parameters.migrationCleanup }}
      GITOPS_MANIFEST_DIRECTORY: $(templates_dir)
      NAMESPACE: ${{ parameters.namespace }}
    inputs:
      azureSubscription: '$(SERVICE_CONNECTION_NAME)'
      addSpnToEnvironment: true
      scriptLocation: inlineScript
      inlineScript: |
        #!/usr/bin/env bash
        set -euo pipefail

        echo "Logging in to AKS"
        echo "------------------------------------"
        which kubectl || sudo az aks install-cli
        az aks get-credentials -g $BASE_NAME_SR-rg -n $BASE_NAME_SR-aks

        if [[ $MIGRATION_CLEANUP == "true" ]]; then
          echo "[WARNING] Migration Cleanup set to true"
          echo "[WARNING] This will remove manifests from flux for cleanup"
          echo "[WARNING] This logic changed in OSDU v0.16.0 M13"
          echo "[WARNING] Gradually moving to helm install/flux deprecation"

          echo "[INFO] Cleaning up resources in $GITOPS_MANIFEST_DIRECTORY | $(templates_dir)"
          if helm get notes ${SERVICE_NAME} -n ${NAMESPACE} ; then 
            echo "[INFO] Helm release already found, skiping cleanup"
            exit 0
          fi
          for k8sman in $(find $GITOPS_MANIFEST_DIRECTORY -name '*.yaml' -o -name '*.yml'); do
            kubectl delete -f $k8sman || echo "[WARN] Not found $k8sman --- good"
          done
          exit 0
        fi

        if [[ $SKIP_CHECK == true ]]
        then
            echo "***********************"
            echo "FLUX DEPLOYMENT SKIPPED"
            echo "***********************"
            exit 0
        fi

        echo "Checking Deployment $SERVICE_NAME Available"
        echo "------------------------------------"
        attempt_counter=0
        max_attempts=30
        until kubectl get deployment $SERVICE_NAME -n osdu
        do
          if [ ${attempt_counter} -eq ${max_attempts} ];then
            echo "Deployment Image not updated, integration tests are skipped"
            exit 1
          fi
          attempt_counter=$(($attempt_counter+1))
          sleep 30
        done

        kubectl wait --for=condition=available --timeout=600s deployment/$SERVICE_NAME -n osdu
